{"id":"ejercicios/generators.html","dependencies":[{"name":"D:\\javie\\OneDrive - Instituto Politecnico Nacional\\Escuela de Javascript\\Curso-profesional-de-javascript\\package.json","includedInParent":true,"mtime":1569299088595}],"generated":{"html":"<html>\n  <head>\n    <title>Generators</title>\n  </head>\n\n  <body>\n    <a href=\"/ejercicios/\">Go back</a>\n    <p><em>Abre la consola</em></p>\n\n    <script>// Los generadores son funciones de las que se puede salir y volver a entrar.\n// Su contexto (asociación de variables) será conservado entre las reentradas.\n// Cada vez que llamamos next, la ejecución del generador va a continuar hasta el proximo yield\nfunction* simpleGenerator() {\n  console.log('generator start');\n  yield 1;\n  yield 2;\n  yield 3;\n  console.log('generator END');\n}\n\nconst gen = simpleGenerator(); // Podemos hacer generadores infinitos.\n\nfunction* makers() {\n  let id = 1;\n\n  while (true) {\n    yield id;\n    id++;\n  }\n} // Cuando llamamos next también podemos pasar valores que la función recibe.\n\n\nfunction* makersWithReset() {\n  let id = 1;\n\n  while (true) {\n    reset = yield id;\n\n    if (reset) {\n      id = 1;\n    } else id++;\n  }\n} // Ahora hagamos un ejemplo un poco más complejo: la secuencia fibonacci\n\n\nfunction* fibonacci() {\n  let a = 1;\n  let b = 2;\n\n  while (true) {\n    const nextNumber = a + b;\n    a = b;\n    b = nextNumber;\n    yield nextNumber;\n  }\n}</script>\n  </body>\n</html>\n"},"sourceMaps":null,"error":null,"hash":"2c7d1378a761fc83cdeafc3c5f808290","cacheData":{"env":{}}}