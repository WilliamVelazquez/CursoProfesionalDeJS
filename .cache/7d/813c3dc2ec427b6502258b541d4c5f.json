{"id":"ejercicios/proxy.html","dependencies":[{"name":"D:\\javie\\OneDrive - Instituto Politecnico Nacional\\Escuela de Javascript\\Curso-profesional-de-javascript\\package.json","includedInParent":true,"mtime":1569299088595}],"generated":{"html":"<html>\n  <head>\n    <title>Proxy</title>\n  </head>\n\n  <body>\n    <a href=\"/ejercicios/\">Go back</a>\n    <p><em>Abre la consola</em></p>\n\n    <script src=\"https://unpkg.com/fast-levenshtein@2.0.6/levenshtein.js\"></script>\n    <script>// Proxy es parecido a getters y setters\n// Usa un concepto que se llama traps: son interceptores de llamadas. A diferencia de getters, no opera sobre una propieda, si no sobre un objeto.\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#Methods_of_the_handler_object\n// Creemos un ejemplo donde interceptamos llamadas para leer una propiedad\n// Si la propiedad existe, la regresamos\n// Si no existe, entonces sugerimos una que pueda funcionar\n// Para eso eso vamos a usar un algoritmo que se llama Levenshtein. (window.Levenshtein.get)\n// Ejemplos de levenshtein distance (usa window.Levenshtein)\nconst target = {\n  red: \"Rojo\",\n  green: \"Verde\",\n  blue: \"Azul\"\n};\nconst handler = {\n  get(objeto, propiedad) {\n    if (propiedad in objeto) {\n      return objeto[propiedad];\n    }\n\n    const suggestion = Object.keys(objeto).find(key => Levenshtein.get(key, propiedad) <= 3);\n\n    if (suggestion) {\n      console.log(`${propiedad} no se encontro .Quisiste decir ${suggestion}? `);\n    }\n\n    return objeto[propiedad];\n  }\n\n};\nconst p = new Proxy(target, handler);</script>\n  </body>\n</html>\n"},"sourceMaps":null,"error":null,"hash":"b0062ae73dc6ce82c6942b3ba8a74cde","cacheData":{"env":{}}}